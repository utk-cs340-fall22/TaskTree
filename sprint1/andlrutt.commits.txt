### frontend/src/App.css ###

148db3f2 (Andrew Rutter 2022-09-20 20:35:11 -0400  1) .App {
148db3f2 (Andrew Rutter 2022-09-20 20:35:11 -0400  2)   text-align: center;
148db3f2 (Andrew Rutter 2022-09-20 20:35:11 -0400  3) }
148db3f2 (Andrew Rutter 2022-09-20 20:35:11 -0400  4) 
148db3f2 (Andrew Rutter 2022-09-20 20:35:11 -0400  5) .App-header {
148db3f2 (Andrew Rutter 2022-09-20 20:35:11 -0400  6)   min-height: 100vh;
148db3f2 (Andrew Rutter 2022-09-20 20:35:11 -0400  7)   display: flex;
148db3f2 (Andrew Rutter 2022-09-20 20:35:11 -0400  8)   flex-direction: column;
148db3f2 (Andrew Rutter 2022-09-20 20:35:11 -0400  9)   align-items: center;
148db3f2 (Andrew Rutter 2022-09-20 20:35:11 -0400 10)   justify-content: center;
148db3f2 (Andrew Rutter 2022-09-20 20:35:11 -0400 11)   font-size: calc(10px + 2vmin);
148db3f2 (Andrew Rutter 2022-09-20 20:35:11 -0400 12) }
b48b8a34 (Andrew Rutter 2022-09-25 23:33:53 -0400 13) 
b48b8a34 (Andrew Rutter 2022-09-25 23:33:53 -0400 14) .nav {
b48b8a34 (Andrew Rutter 2022-09-25 23:33:53 -0400 15)   list-style-type: none;
b48b8a34 (Andrew Rutter 2022-09-25 23:33:53 -0400 16) }
b48b8a34 (Andrew Rutter 2022-09-25 23:33:53 -0400 17) 


### frontend/src/App.tsx ###

5d0db7d8 frontend/src/App.tsx (andlrutt               2022-09-22 13:28:43 -0400  1) import React from 'react';
798c1827 frontend/src/App.tsx (Andrew Rutter          2022-09-20 20:54:30 -0400  2) import { useEffect } from 'react';
148db3f2 frontend/src/App.js  (Andrew Rutter          2022-09-20 20:35:11 -0400 13) import './App.css';
148db3f2 frontend/src/App.js  (Andrew Rutter          2022-09-20 20:35:11 -0400 15) 
148db3f2 frontend/src/App.js  (Andrew Rutter          2022-09-20 20:35:11 -0400 31) function App() {
148db3f2 frontend/src/App.js  (Andrew Rutter          2022-09-20 20:35:11 -0400 49) }
148db3f2 frontend/src/App.js  (Andrew Rutter          2022-09-20 20:35:11 -0400 50) 
148db3f2 frontend/src/App.js  (Andrew Rutter          2022-09-20 20:35:11 -0400 51) export default App;


### frontend/src/index.css ###

148db3f2 (Andrew Rutter 2022-09-20 20:35:11 -0400  1) body {
148db3f2 (Andrew Rutter 2022-09-20 20:35:11 -0400  2)   margin: 0;
148db3f2 (Andrew Rutter 2022-09-20 20:35:11 -0400  3)   font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
148db3f2 (Andrew Rutter 2022-09-20 20:35:11 -0400  4)     'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
148db3f2 (Andrew Rutter 2022-09-20 20:35:11 -0400  5)     sans-serif;
148db3f2 (Andrew Rutter 2022-09-20 20:35:11 -0400  6)   -webkit-font-smoothing: antialiased;
148db3f2 (Andrew Rutter 2022-09-20 20:35:11 -0400  7)   -moz-osx-font-smoothing: grayscale;
148db3f2 (Andrew Rutter 2022-09-20 20:35:11 -0400  8) }
148db3f2 (Andrew Rutter 2022-09-20 20:35:11 -0400  9) 
148db3f2 (Andrew Rutter 2022-09-20 20:35:11 -0400 10) code {
148db3f2 (Andrew Rutter 2022-09-20 20:35:11 -0400 11)   font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
148db3f2 (Andrew Rutter 2022-09-20 20:35:11 -0400 12)     monospace;
148db3f2 (Andrew Rutter 2022-09-20 20:35:11 -0400 13) }


### backend/TaskTree/Controllers/UsersController.cs ###

f88b3fe4 (Andrew Rutter 2022-10-03 23:18:34 -0400   2) using Microsoft.AspNetCore.Authorization;
f88b3fe4 (Andrew Rutter 2022-10-03 23:18:34 -0400   5) using Microsoft.EntityFrameworkCore.Metadata.Internal;
849e08c4 (andlrutt      2022-10-03 15:26:51 -0400   6) using Microsoft.Extensions.Options;
f628b09c (Andrew Rutter 2022-10-02 23:20:51 -0400   7) using Microsoft.IdentityModel.Tokens;
f628b09c (Andrew Rutter 2022-10-02 23:20:51 -0400   8) using System.IdentityModel.Tokens.Jwt;
f628b09c (Andrew Rutter 2022-10-02 23:20:51 -0400   9) using System.Security.Claims;
f628b09c (Andrew Rutter 2022-10-02 23:20:51 -0400  10) using System.Text;
f628b09c (Andrew Rutter 2022-10-02 23:20:51 -0400  17)     [Route("api/[controller]")]
849e08c4 (andlrutt      2022-10-03 15:26:51 -0400  23)     private readonly IOptions<AppConfig> _config;
849e08c4 (andlrutt      2022-10-03 15:26:51 -0400  25)     public UsersController(TaskTreeContext context, IMapper mapper, IOptions<AppConfig> config)
849e08c4 (andlrutt      2022-10-03 15:26:51 -0400  29)       _config = config;
f88b3fe4 (Andrew Rutter 2022-10-03 23:18:34 -0400  34)     [Authorize]
f88b3fe4 (Andrew Rutter 2022-10-03 23:18:34 -0400  56)     [Authorize]
f88b3fe4 (Andrew Rutter 2022-10-03 23:18:34 -0400 115)     [Authorize]
ed05e46c (andlrutt      2022-10-04 07:50:52 -0400 136)         // POST api/Users/auth
ed05e46c (andlrutt      2022-10-04 07:50:52 -0400 137)         [HttpPost("auth")]
ed05e46c (andlrutt      2022-10-04 07:50:52 -0400 138)         public IActionResult AuthenticateUser(AuthenticateUserRequest authenticateUserRequest)
ed275c19 (Andrew Rutter 2022-10-03 00:18:07 -0400 139)         {
ed275c19 (Andrew Rutter 2022-10-03 00:18:07 -0400 140)             // gets a single entry from DB with matching username and password, stores in a <= 1 length list
ed275c19 (Andrew Rutter 2022-10-03 00:18:07 -0400 141)             var query = (from user in _context.Users
ed275c19 (Andrew Rutter 2022-10-03 00:18:07 -0400 142)                          where user.Username == authenticateUserRequest.Username
ed275c19 (Andrew Rutter 2022-10-03 00:18:07 -0400 143)                          where user.Password == authenticateUserRequest.Password
ed275c19 (Andrew Rutter 2022-10-03 00:18:07 -0400 144)                          select new UserResponse
ed275c19 (Andrew Rutter 2022-10-03 00:18:07 -0400 145)                          { id = user.Id, firstName = user.FirstName, lastName = user.LastName, username = user.Username }).ToList();
ed275c19 (Andrew Rutter 2022-10-03 00:18:07 -0400 146) 
ed275c19 (Andrew Rutter 2022-10-03 00:18:07 -0400 147) 
ed275c19 (Andrew Rutter 2022-10-03 00:18:07 -0400 148)             // if the list has an entry, create a jwt valid for 24 hours. Otherwise, return 401
ed275c19 (Andrew Rutter 2022-10-03 00:18:07 -0400 149)             if (query.Any())
ed275c19 (Andrew Rutter 2022-10-03 00:18:07 -0400 150)             {
ed275c19 (Andrew Rutter 2022-10-03 00:18:07 -0400 151)                 var userResponse = query.First();
ed275c19 (Andrew Rutter 2022-10-03 00:18:07 -0400 152) 
849e08c4 (andlrutt      2022-10-03 15:26:51 -0400 153)                 var securityKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_config.Value.AuthKey));
ed275c19 (Andrew Rutter 2022-10-03 00:18:07 -0400 154)                 var credentials = new SigningCredentials(securityKey, SecurityAlgorithms.HmacSha256);
ed275c19 (Andrew Rutter 2022-10-03 00:18:07 -0400 155) 
ed275c19 (Andrew Rutter 2022-10-03 00:18:07 -0400 156)                 //Create a List of Claims
ed275c19 (Andrew Rutter 2022-10-03 00:18:07 -0400 157)                 var permClaims = new List<Claim>();
ed275c19 (Andrew Rutter 2022-10-03 00:18:07 -0400 158)                 permClaims.Add(new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString()));
ed275c19 (Andrew Rutter 2022-10-03 00:18:07 -0400 159)                 permClaims.Add(new Claim("username", userResponse.username));
ed275c19 (Andrew Rutter 2022-10-03 00:18:07 -0400 160)                 permClaims.Add(new Claim("id", userResponse.id.ToString()));
849e08c4 (andlrutt      2022-10-03 15:26:51 -0400 161)                 if (userResponse.firstName != null)
ed275c19 (Andrew Rutter 2022-10-03 00:18:07 -0400 162)                 {
ed275c19 (Andrew Rutter 2022-10-03 00:18:07 -0400 163)                     permClaims.Add(new Claim("firstname", userResponse.firstName));
ed275c19 (Andrew Rutter 2022-10-03 00:18:07 -0400 164)                 }
ed275c19 (Andrew Rutter 2022-10-03 00:18:07 -0400 165)                 if (userResponse.lastName != null)
ed275c19 (Andrew Rutter 2022-10-03 00:18:07 -0400 166)                 {
ed275c19 (Andrew Rutter 2022-10-03 00:18:07 -0400 167)                     permClaims.Add(new Claim("lastname", userResponse.lastName));
ed275c19 (Andrew Rutter 2022-10-03 00:18:07 -0400 168)                 }
ed275c19 (Andrew Rutter 2022-10-03 00:18:07 -0400 169) 
ed275c19 (Andrew Rutter 2022-10-03 00:18:07 -0400 170)                 //Create Security Token object by giving required parameters    
849e08c4 (andlrutt      2022-10-03 15:26:51 -0400 171)                 var token = new JwtSecurityToken(_config.Value.AuthIssuer,
849e08c4 (andlrutt      2022-10-03 15:26:51 -0400 172)                   _config.Value.AuthIssuer,
ed275c19 (Andrew Rutter 2022-10-03 00:18:07 -0400 173)                   permClaims,
ed275c19 (Andrew Rutter 2022-10-03 00:18:07 -0400 174)                   expires: DateTime.Now.AddDays(1),
ed275c19 (Andrew Rutter 2022-10-03 00:18:07 -0400 175)                   signingCredentials: credentials);
ed275c19 (Andrew Rutter 2022-10-03 00:18:07 -0400 176)                 var jwt_token = new JwtSecurityTokenHandler().WriteToken(token);
f88b3fe4 (Andrew Rutter 2022-10-03 23:18:34 -0400 177)                 
ed275c19 (Andrew Rutter 2022-10-03 00:18:07 -0400 178)                 return Ok(jwt_token);
ed275c19 (Andrew Rutter 2022-10-03 00:18:07 -0400 179)             }
ed275c19 (Andrew Rutter 2022-10-03 00:18:07 -0400 180)             else
ed275c19 (Andrew Rutter 2022-10-03 00:18:07 -0400 181)             {
ed275c19 (Andrew Rutter 2022-10-03 00:18:07 -0400 182)                 // user could not be found
ed275c19 (Andrew Rutter 2022-10-03 00:18:07 -0400 183)                 return Unauthorized("Invalid username or password.");
ed275c19 (Andrew Rutter 2022-10-03 00:18:07 -0400 184)             }
ed275c19 (Andrew Rutter 2022-10-03 00:18:07 -0400 185)         }
f628b09c (Andrew Rutter 2022-10-02 23:20:51 -0400 186) 
f628b09c (Andrew Rutter 2022-10-02 23:20:51 -0400 187)         private bool UserExists(long id)


### backend/TaskTree/Models/AppConfig.cs ###

849e08c4 (andlrutt 2022-10-03 15:26:51 -0400 1) ï»¿namespace TaskTree.Models
849e08c4 (andlrutt 2022-10-03 15:26:51 -0400 2) {
849e08c4 (andlrutt 2022-10-03 15:26:51 -0400 3)     public class AppConfig
849e08c4 (andlrutt 2022-10-03 15:26:51 -0400 4)     {
849e08c4 (andlrutt 2022-10-03 15:26:51 -0400 5)         public string? AuthIssuer { get; set; }
849e08c4 (andlrutt 2022-10-03 15:26:51 -0400 6)         public string? AuthKey { get; set; }
849e08c4 (andlrutt 2022-10-03 15:26:51 -0400 7)     }
849e08c4 (andlrutt 2022-10-03 15:26:51 -0400 8) }


### backend/TaskTree/Models/Requests/AuthenticateUserRequest.cs ###

ed275c19 (Andrew Rutter 2022-10-03 00:18:07 -0400  1) ï»¿using Microsoft.AspNetCore.Mvc;
ed275c19 (Andrew Rutter 2022-10-03 00:18:07 -0400  2) using System.ComponentModel.DataAnnotations;
f628b09c (Andrew Rutter 2022-10-02 23:20:51 -0400  3) 
f628b09c (Andrew Rutter 2022-10-02 23:20:51 -0400  4) namespace TaskTree.Models.Requests
f628b09c (Andrew Rutter 2022-10-02 23:20:51 -0400  5) {
f628b09c (Andrew Rutter 2022-10-02 23:20:51 -0400  6)     public class AuthenticateUserRequest
f628b09c (Andrew Rutter 2022-10-02 23:20:51 -0400  7)     {
f628b09c (Andrew Rutter 2022-10-02 23:20:51 -0400  8)         [Required]
ed275c19 (Andrew Rutter 2022-10-03 00:18:07 -0400  9)         public string? Username { get; set; }
f628b09c (Andrew Rutter 2022-10-02 23:20:51 -0400 10)         [Required]
ed275c19 (Andrew Rutter 2022-10-03 00:18:07 -0400 11)         public string? Password { get; set; }
f628b09c (Andrew Rutter 2022-10-02 23:20:51 -0400 12)     }
f628b09c (Andrew Rutter 2022-10-02 23:20:51 -0400 13) }


### backend/TaskTree/Program.cs ###

f88b3fe4 (Andrew Rutter 2022-10-03 23:18:34 -0400  1) using Microsoft.AspNetCore.Authentication.JwtBearer;
f88b3fe4 (Andrew Rutter 2022-10-03 23:18:34 -0400  3) using Microsoft.IdentityModel.Tokens;
f88b3fe4 (Andrew Rutter 2022-10-03 23:18:34 -0400  4) using System.Text;
849e08c4 (andlrutt      2022-10-03 15:26:51 -0400 22) builder.Services.Configure<AppConfig>(builder.Configuration.GetSection("AppConfig"));
849e08c4 (andlrutt      2022-10-03 15:26:51 -0400 23) 
f88b3fe4 (Andrew Rutter 2022-10-03 23:18:34 -0400 33) builder.Services.AddAuthentication(opt => {
f88b3fe4 (Andrew Rutter 2022-10-03 23:18:34 -0400 34)     opt.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
f88b3fe4 (Andrew Rutter 2022-10-03 23:18:34 -0400 35)     opt.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
f88b3fe4 (Andrew Rutter 2022-10-03 23:18:34 -0400 36) })
f88b3fe4 (Andrew Rutter 2022-10-03 23:18:34 -0400 37)     .AddJwtBearer(options =>
f88b3fe4 (Andrew Rutter 2022-10-03 23:18:34 -0400 38)     {
f88b3fe4 (Andrew Rutter 2022-10-03 23:18:34 -0400 39)         options.TokenValidationParameters = new TokenValidationParameters
f88b3fe4 (Andrew Rutter 2022-10-03 23:18:34 -0400 40)         {
f88b3fe4 (Andrew Rutter 2022-10-03 23:18:34 -0400 41)             ValidateIssuer = true,
f88b3fe4 (Andrew Rutter 2022-10-03 23:18:34 -0400 42)             ValidateAudience = true,
f88b3fe4 (Andrew Rutter 2022-10-03 23:18:34 -0400 43)             ValidateLifetime = true,
f88b3fe4 (Andrew Rutter 2022-10-03 23:18:34 -0400 44)             ValidateIssuerSigningKey = true,
f88b3fe4 (Andrew Rutter 2022-10-03 23:18:34 -0400 45)             ValidIssuer = builder.Configuration.GetValue<string>("AppConfig:AuthIssuer"),
f88b3fe4 (Andrew Rutter 2022-10-03 23:18:34 -0400 46)             ValidAudience = builder.Configuration.GetValue<string>("AppConfig:AuthIssuer"),
f88b3fe4 (Andrew Rutter 2022-10-03 23:18:34 -0400 47)             IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(builder.Configuration.GetValue<string>("AppConfig:AuthKey")))
f88b3fe4 (Andrew Rutter 2022-10-03 23:18:34 -0400 48)         };
f88b3fe4 (Andrew Rutter 2022-10-03 23:18:34 -0400 49)     });
f88b3fe4 (Andrew Rutter 2022-10-03 23:18:34 -0400 50) 
f88b3fe4 (Andrew Rutter 2022-10-03 23:18:34 -0400 58) app.UseAuthentication();
f88b3fe4 (Andrew Rutter 2022-10-03 23:18:34 -0400 59) app.UseAuthorization();
f88b3fe4 (Andrew Rutter 2022-10-03 23:18:34 -0400 60) 


### backend/TaskTree/appsettings.Development.json ###

849e08c4 (andlrutt      2022-10-03 15:26:51 -0400 10)   },
849e08c4 (andlrutt      2022-10-03 15:26:51 -0400 11)   "AppConfig": {
849e08c4 (andlrutt      2022-10-03 15:26:51 -0400 12)     "AuthIssuer": "http://localhost:5000/",
849e08c4 (andlrutt      2022-10-03 15:26:51 -0400 13)     "AuthKey": "l2N,A^96HH9Vy40PFpReS8XlP2,o3]"


